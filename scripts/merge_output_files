#!/usr/bin/env python
#
# Merge the output files from the VCF utilities folder.
#
import argparse
import sys

ACCEPTED_SCRIPTS=['eff_table','cases_and_controls','sample_with_genotypes']

def open_all(input_files):
    return [open(s) for s in input_files]

def read_multiple(input_files):
    return [s.readline() for s in input_files]

def close_all(input_files):
    [s.close() for s in input_files]

def get_first_six(line):
    return '\t'.join(line.replace("\n","").split('\t')[:7])

def get_pseq_line(lines):
    try:
        return '\t'.join(['\t'.join(s.replace("\n","").split('\t')[3:]) for s in lines])
    except:
        return ""

def get_full_line(lines):
    return '\t'.join(['\t'.join(s.replace("\n","").split('\t')[7:]) for s in lines])

def merge(input_files,plink_seq_files):
    p_files = open_all(plink_seq_files)
    files =open_all(input_files)
    read_line = read_multiple(files)
    print("#merged")
    no_accepted = [ 1 if s.split('\t')[0].replace("#","") in ACCEPTED_SCRIPTS else 0 for s in read_line]
    if (sum(no_accepted) != len(input_files)):
        sys.stderr.write("ERROR: input file/s does not look to be in the correct format\n")
        sys.exit(1)
    # Read second line
    while(read_line[0] != ""):
        read_line = read_multiple(files)
        read_pseq = read_multiple(p_files)
        final_line = get_first_six(read_line[0])
        final_line = '\t'.join([final_line,get_full_line(read_line),get_pseq_line(read_pseq)])
        # Do something with the pseq files. 
        print(final_line)
    close_all(files)
    close_all(p_files)
def main():
    parser = argparse.ArgumentParser(description="Merge files generated in this pipeline")
    parser.add_argument('--vcf',nargs="+")
    parser.add_argument('--pseq',nargs="+")
    args = parser.parse_args()
    merge(args.vcf,args.pseq)

if __name__=="__main__":
    main()
